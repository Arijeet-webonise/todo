// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// PortalUserRole represents a row from 'public.portal_user_role'.
type PortalUserRole struct {
	ID     int `json:"id"`      // id
	RoleID int `json:"role_id"` // role_id
	UserID int `json:"user_id"` // user_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PortalUserRole exists in the database.
func (pur *PortalUserRole) Exists() bool {
	return pur._exists
}

// Deleted provides information if the PortalUserRole has been deleted from the database.
func (pur *PortalUserRole) Deleted() bool {
	return pur._deleted
}

// Insert inserts the PortalUserRole to the database.
func (pur *PortalUserRole) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pur._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.portal_user_role (` +
		`role_id, user_id` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, pur.RoleID, pur.UserID)
	err = db.QueryRow(sqlstr, pur.RoleID, pur.UserID).Scan(&pur.ID)
	if err != nil {
		return err
	}

	// set existence
	pur._exists = true

	return nil
}

// Update updates the PortalUserRole in the database.
func (pur *PortalUserRole) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pur._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pur._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.portal_user_role SET (` +
		`role_id, user_id` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE id = $3`

	// run query
	XOLog(sqlstr, pur.RoleID, pur.UserID, pur.ID)
	_, err = db.Exec(sqlstr, pur.RoleID, pur.UserID, pur.ID)
	return err
}

// Save saves the PortalUserRole to the database.
func (pur *PortalUserRole) Save(db XODB) error {
	if pur.Exists() {
		return pur.Update(db)
	}

	return pur.Insert(db)
}

// Upsert performs an upsert for PortalUserRole.
//
// NOTE: PostgreSQL 9.5+ only
func (pur *PortalUserRole) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if pur._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.portal_user_role (` +
		`id, role_id, user_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, role_id, user_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.role_id, EXCLUDED.user_id` +
		`)`

	// run query
	XOLog(sqlstr, pur.ID, pur.RoleID, pur.UserID)
	_, err = db.Exec(sqlstr, pur.ID, pur.RoleID, pur.UserID)
	if err != nil {
		return err
	}

	// set existence
	pur._exists = true

	return nil
}

// Delete deletes the PortalUserRole from the database.
func (pur *PortalUserRole) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pur._exists {
		return nil
	}

	// if deleted, bail
	if pur._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.portal_user_role WHERE id = $1`

	// run query
	XOLog(sqlstr, pur.ID)
	_, err = db.Exec(sqlstr, pur.ID)
	if err != nil {
		return err
	}

	// set deleted
	pur._deleted = true

	return nil
}

// GetAllPortalUserRoles returns all rows from 'public.portal_user_role',
// ordered by "created_at" in descending order.
func GetAllPortalUserRoles(db XODB) ([]*PortalUserRole, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.portal_user_role`

	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*PortalUserRole
	for q.Next() {
		pur := PortalUserRole{}

		// scan
		err = q.Scan(&pur.ID, &pur.RoleID, &pur.UserID)
		if err != nil {
			return nil, err
		}

		res = append(res, &pur)
	}

	return res, nil
}

// GetChunkedPortalUserRoles returns pagingated rows from 'public.portal_user_role',
// ordered by "created_at" in descending order.
func GetChunkedPortalUserRoles(db XODB, limit int, offset int) ([]*PortalUserRole, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.portal_user_role LIMIT $1 OFFSET $2`

	q, err := db.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*PortalUserRole
	for q.Next() {
		pur := PortalUserRole{}

		// scan
		err = q.Scan(&pur.ID, &pur.RoleID, &pur.UserID)
		if err != nil {
			return nil, err
		}

		res = append(res, &pur)
	}

	return res, nil
}

// PortalRole returns the PortalRole associated with the PortalUserRole's RoleID (role_id).
//
// Generated from foreign key 'portal_user_role_role_id_fkey'.
func (pur *PortalUserRole) PortalRole(db XODB) (*PortalRole, error) {
	return PortalRoleByID(db, pur.RoleID)
}

// PortalUser returns the PortalUser associated with the PortalUserRole's UserID (user_id).
//
// Generated from foreign key 'portal_user_role_user_id_fkey'.
func (pur *PortalUserRole) PortalUser(db XODB) (*PortalUser, error) {
	return PortalUserByID(db, pur.UserID)
}

// PortalUserRoleByID retrieves a row from 'public.portal_user_role' as a PortalUserRole.
//
// Generated from index 'portal_user_role_pkey'.
func PortalUserRoleByID(db XODB, id int) (*PortalUserRole, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, role_id, user_id ` +
		`FROM public.portal_user_role ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	pur := PortalUserRole{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pur.ID, &pur.RoleID, &pur.UserID)
	if err != nil {
		return nil, err
	}

	return &pur, nil
}
