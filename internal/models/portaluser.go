// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// PortalUser represents a row from 'public.portal_user'.
type PortalUser struct {
	ID        int            `json:"id"`         // id
	EmailID   string         `json:"email_id"`   // email_id
	Password  string         `json:"password"`   // password
	FirstName sql.NullString `json:"first_name"` // first_name
	LastName  sql.NullString `json:"last_name"`  // last_name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PortalUser exists in the database.
func (pu *PortalUser) Exists() bool {
	return pu._exists
}

// Deleted provides information if the PortalUser has been deleted from the database.
func (pu *PortalUser) Deleted() bool {
	return pu._deleted
}

// Insert inserts the PortalUser to the database.
func (pu *PortalUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.portal_user (` +
		`email_id, password, first_name, last_name` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, pu.EmailID, pu.Password, pu.FirstName, pu.LastName)
	err = db.QueryRow(sqlstr, pu.EmailID, pu.Password, pu.FirstName, pu.LastName).Scan(&pu.ID)
	if err != nil {
		return err
	}

	// set existence
	pu._exists = true

	return nil
}

// Update updates the PortalUser in the database.
func (pu *PortalUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.portal_user SET (` +
		`email_id, password, first_name, last_name` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, pu.EmailID, pu.Password, pu.FirstName, pu.LastName, pu.ID)
	_, err = db.Exec(sqlstr, pu.EmailID, pu.Password, pu.FirstName, pu.LastName, pu.ID)
	return err
}

// Save saves the PortalUser to the database.
func (pu *PortalUser) Save(db XODB) error {
	if pu.Exists() {
		return pu.Update(db)
	}

	return pu.Insert(db)
}

// Upsert performs an upsert for PortalUser.
//
// NOTE: PostgreSQL 9.5+ only
func (pu *PortalUser) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if pu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.portal_user (` +
		`id, email_id, password, first_name, last_name` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, email_id, password, first_name, last_name` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.email_id, EXCLUDED.password, EXCLUDED.first_name, EXCLUDED.last_name` +
		`)`

	// run query
	XOLog(sqlstr, pu.ID, pu.EmailID, pu.Password, pu.FirstName, pu.LastName)
	_, err = db.Exec(sqlstr, pu.ID, pu.EmailID, pu.Password, pu.FirstName, pu.LastName)
	if err != nil {
		return err
	}

	// set existence
	pu._exists = true

	return nil
}

// Delete deletes the PortalUser from the database.
func (pu *PortalUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pu._exists {
		return nil
	}

	// if deleted, bail
	if pu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.portal_user WHERE id = $1`

	// run query
	XOLog(sqlstr, pu.ID)
	_, err = db.Exec(sqlstr, pu.ID)
	if err != nil {
		return err
	}

	// set deleted
	pu._deleted = true

	return nil
}

// GetAllPortalUsers returns all rows from 'public.portal_user',
// ordered by "created_at" in descending order.
func GetAllPortalUsers(db XODB) ([]*PortalUser, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.portal_user`

	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*PortalUser
	for q.Next() {
		pu := PortalUser{}

		// scan
		err = q.Scan(&pu.ID, &pu.EmailID, &pu.Password, &pu.FirstName, &pu.LastName)
		if err != nil {
			return nil, err
		}

		res = append(res, &pu)
	}

	return res, nil
}

// GetChunkedPortalUsers returns pagingated rows from 'public.portal_user',
// ordered by "created_at" in descending order.
func GetChunkedPortalUsers(db XODB, limit int, offset int) ([]*PortalUser, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.portal_user LIMIT $1 OFFSET $2`

	q, err := db.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*PortalUser
	for q.Next() {
		pu := PortalUser{}

		// scan
		err = q.Scan(&pu.ID, &pu.EmailID, &pu.Password, &pu.FirstName, &pu.LastName)
		if err != nil {
			return nil, err
		}

		res = append(res, &pu)
	}

	return res, nil
}

// PortalUserByEmailID retrieves a row from 'public.portal_user' as a PortalUser.
//
// Generated from index 'portal_user_email_id_key'.
func PortalUserByEmailID(db XODB, emailID string) (*PortalUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email_id, password, first_name, last_name ` +
		`FROM public.portal_user ` +
		`WHERE email_id = $1`

	// run query
	XOLog(sqlstr, emailID)
	pu := PortalUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, emailID).Scan(&pu.ID, &pu.EmailID, &pu.Password, &pu.FirstName, &pu.LastName)
	if err != nil {
		return nil, err
	}

	return &pu, nil
}

// PortalUserByID retrieves a row from 'public.portal_user' as a PortalUser.
//
// Generated from index 'portal_user_pkey'.
func PortalUserByID(db XODB, id int) (*PortalUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email_id, password, first_name, last_name ` +
		`FROM public.portal_user ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	pu := PortalUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pu.ID, &pu.EmailID, &pu.Password, &pu.FirstName, &pu.LastName)
	if err != nil {
		return nil, err
	}

	return &pu, nil
}
